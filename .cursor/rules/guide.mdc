---
description: Guidelines for using letsearch
globs: 
alwaysApply: true
---
`letsearch` is a Rust application designed for efficient **vector similarity search** on textual datasets. It provides a complete pipeline from data ingestion to search deployment.
The core architecture revolves around the concept of a `Collection` (#0), representing a dataset stored in *DuckDB* and its associated vector indices (*usearch* via `VectorIndex` #4).
Multiple collections are managed by a `CollectionManager` (#1), which acts as a **Facade**, simplifying interactions like data import (JSONL, Parquet) and index creation.
Embedding generation is handled by a `ModelManager` (#2), which abstracts over different model backends (currently *ONNX Runtime* via `ONNXModel` #3) and interacts with `hf_ops` (#5) to download models from the Hugging Face Hub. The `ModelManager` potentially employs a **Flyweight** pattern to manage loaded model instances.
The system exposes functionality through two primary interfaces: a command-line interface (`Cli` #7) built with *clap* for indexing and administrative tasks, and a web server (`Serve` #6) built with *Actix Web* for providing a REST API to search indexed collections.
Concurrency is managed using *Tokio* and standard library synchronization primitives like `Arc<RwLock<T>>` for thread-safe access to shared resources like collections, models, and managers. The design emphasizes modularity, allowing different components (data storage, vector index, model backend) to be potentially swapped or extended.


**Source Repository:** [https://github.com/altaidevorg/letsearch.git](https://github.com/altaidevorg/letsearch.git)

```mermaid
flowchart TD
    A0["Collection"]
    A1["CollectionManager"]
    A2["ModelManager"]
    A3["ONNXModel / BertONNX"]
    A4["VectorIndex"]
    A5["hf_ops"]
    A6["Serve (Actix Web App)"]
    A7["Cli / Commands"]
    A1 -- "Manages instances" --> A0
    A1 -- "Loads models via" --> A2
    A0 -- "Uses for vector storage/search" --> A4
    A0 -- "Uses for embedding" --> A2
    A2 -- "Manages model instances" --> A3
    A2 -- "Downloads models via" --> A5
    A6 -- "Accesses collections via" --> A1
    A7 -- "Executes index commands via" --> A1
    A7 -- "Starts server" --> A6
    A7 -- "Lists models via" --> A5
```

## Chapters

[Cli / Commands](cli___commands.mdc)
[Serve (Actix Web App)](serve__actix_web_app_.mdc)
[CollectionManager](collectionmanager.mdc)
[Collection](collection.mdc)
[ModelManager](modelmanager.mdc)
[VectorIndex](vectorindex.mdc)
[ONNXModel / BertONNX](onnxmodel___bertonnx.mdc)
[hf_ops](hf_ops.mdc)


---

Generated by [Rules for AI](https://github.com/altaidevorg/rules-for-ai)